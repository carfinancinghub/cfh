```
// ðŸ‘‘ Crown Certified Test â€” PredictionEngine.test.js
// Path: backend/tests/services/ai/PredictionEngine.test.js
// Purpose: Unit tests for PredictionEngine service, covering predictions and recommendations.
// Author: Rivers Auction Team â€” May 16, 2025

const PredictionEngine = require('@services/ai/PredictionEngine');
const Auction = require('@models/Auction');
const Bid = require('@models/Bid');
const Escrow = require('@models/Escrow');
const MLModel = require('@services/ai/MLModel');
const logger = require('@utils/logger');

jest.mock('@models/Auction');
jest.mock('@models/Bid');
jest.mock('@models/Escrow');
jest.mock('@services/ai/MLModel');
jest.mock('@utils/logger', () => ({
  error: jest.fn(),
}));

describe('PredictionEngine', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('getBasicPrediction', () => {
    const inputData = { auctionId: 'a1', bidAmount: 1000 };

    it('should return basic prediction for bid success', async () => {
      Auction.findOne.mockResolvedValue({ auctionId: 'a1', status: 'active' });
      Bid.find.mockResolvedValue([{ bidAmount: 900 }, { bidAmount: 950 }]);
      MLModel.predict.mockReturnValue({ successProbability: 0.75 });

      const result = await PredictionEngine.getBasicPrediction(inputData);

      expect(result).toEqual({
        success: true,
        data: { prediction: { successProbability: 0.75 } },
        version: 'v1',
      });
      expect(Auction.findOne).toHaveBeenCalledWith({ auctionId: 'a1' });
      expect(Bid.find).toHaveBeenCalledWith({ auctionId: 'a1' });
      expect(MLModel.predict).toHaveBeenCalledWith(expect.any(Object));
    });

    it('should throw error for missing parameters', async () => {
      await expect(PredictionEngine.getBasicPrediction({})).rejects.toThrow('Missing required parameters');
      expect(logger.error).toHaveBeenCalledWith('Prediction failed: Missing parameters', expect.any(Error));
    });

    it('should throw error on model failure', async () => {
      Auction.findOne.mockResolvedValue({ auctionId: 'a1' });
      Bid.find.mockResolvedValue([]);
      MLModel.predict.mockImplementation(() => { throw new Error('Model error'); });

      await expect(PredictionEngine.getBasicPrediction(inputData)).rejects.toThrow('Prediction failed');
      expect(logger.error).toHaveBeenCalledWith('Prediction failed: Model error', expect.any(Error));
    });
  });

  describe('getAdvancedPrediction', () => {
    const inputData = { auctionId: 'a1', userId: 'u1' };

    it('should return advanced prediction for premium user', async () => {
      Auction.findOne.mockResolvedValue({ auctionId: 'a1', status: 'active' });
      Escrow.find.mockResolvedValue([{ transactionId: 'tx1', status: 'pending' }]);
      MLModel.predictAdvanced.mockReturnValue({
        titleProcessingDelay: '2 days',
        escrowSyncTiming: '1 hour',
      });

      const result = await PredictionEngine.getAdvancedPrediction(inputData);

      expect(result).toEqual({
        success: true,
        data: {
          prediction: {
            titleProcessingDelay: '2 days',
            escrowSyncTiming: '1 hour',
          },
        },
        version: 'v1',
      });
      expect(Auction.findOne).toHaveBeenCalledWith({ auctionId: 'a1' });
      expect(Escrow.find).toHaveBeenCalledWith({ userId: 'u1' });
      expect(MLModel.predictAdvanced).toHaveBeenCalledWith(expect.any(Object));
    });

    it('should throw error for missing parameters', async () => {
      await expect(PredictionEngine.getAdvancedPrediction({})).rejects.toThrow('Missing required parameters');
      expect(logger.error).toHaveBeenCalledWith('Advanced prediction failed: Missing parameters', expect.any(Error));
    });

    it('should throw error on model failure', async () => {
      Auction.findOne.mockResolvedValue({ auctionId: 'a1' });
      Escrow.find.mockResolvedValue([]);
      MLModel.predictAdvanced.mockImplementation(() => { throw new Error('Model error'); });

      await expect(PredictionEngine.getAdvancedPrediction(inputData)).rejects.toThrow('Advanced prediction failed');
      expect(logger.error).toHaveBeenCalledWith('Advanced prediction failed: Model error', expect.any(Error));
    });
  });

  describe('getRecommendation', () => {
    const inputData = { auctionId: 'a1', bidAmount: 1000 };

    it('should return recommendation for premium user', async () => {
      Auction.findOne.mockResolvedValue({ auctionId: 'a1', status: 'active' });
      Bid.find.mockResolvedValue([{ bidAmount: 900 }, { bidAmount: 950 }]);
      MLModel.recommend.mockReturnValue({ message: 'Increase bid by 5% to improve winning odds' });

      const result = await PredictionEngine.getRecommendation(inputData);

      expect(result).toEqual({
        success: true,
        data: {
          recommendation: { message: 'Increase bid by 5% to improve winning odds' },
        },
        version: 'v1',
      });
      expect(Auction.findOne).toHaveBeenCalledWith({ auctionId: 'a1' });
      expect(Bid.find).toHaveBeenCalledWith({ auctionId: 'a1' });
      expect(MLModel.recommend).toHaveBeenCalledWith(expect.any(Object));
    });

    it('should throw error for missing parameters', async () => {
      await expect(PredictionEngine.getRecommendation({})).rejects.toThrow('Missing required parameters');
      expect(logger.error).toHaveBeenCalledWith('Recommendation failed: Missing parameters', expect.any(Error));
    });

    it('should throw error on model failure', async () => {
      Auction.findOne.mockResolvedValue({ auctionId: 'a1' });
      Bid.find.mockResolvedValue([]);
      MLModel.recommend.mockImplementation(() => { throw new Error('Model error'); });

      await expect(PredictionEngine.getRecommendation(inputData)).rejects.toThrow('Recommendation failed');
      expect(logger.error).toHaveBeenCalledWith('Recommendation failed: Model error', expect.any(Error));
    });
  });
});

/*
Functions Summary:
- describe('PredictionEngine')
  - Purpose: Test suite for PredictionEngine service methods
  - Tests:
    - getBasicPrediction: Bid success probability, missing parameters, model failure
    - getAdvancedPrediction: Title/escrow predictions, missing parameters, model failure
    - getRecommendation: Strategic recommendations, missing parameters, model failure
  - Dependencies: @models/Auction, @models/Bid, @models/Escrow, @services/ai/MLModel, @utils/logger
*/
```
