import handlebars from 'handlebars';
import { notificationQueue } from '@utils/notificationQueue';
import pLimit from 'p-limit';
import logger from '@config/logger';

const limit = pLimit(1); // Strictest concurrency limit

export class NotificationService {
  static async sendEmailNotification(userId: string, eventType: string, message: string): Promise<void> {
    try {
      await limit(() => notificationQueue.add({ userId, eventType, message }));
    } catch (error: unknown) {
      if (error instanceof Error) {
        logger.error(Error sending email notification: , { error });
        throw error;
      }
      logger.error('Unknown error sending email notification');
      throw new Error('Unknown error');
    }
  }

  static async queueNotification(job: { data: { userId: string; eventType: string; message: string } }): Promise<void> {
    try {
      console.log(Processing notification for user : );
    } catch (error: unknown) {
      if (error instanceof Error) {
        logger.error(Error queuing notification: , { error });
        throw error;
      }
      logger.error('Unknown error queuing notification');
      throw new Error('Unknown error');
    }
  }
}
