/*
 * File: PointsHistory.jsx
 * Path: C:\CFH\frontend\src\components\user\PointsHistory.jsx
 * Purpose: Display user points, transaction history, and trends.
 * Author: CFH Dev Team (Generated by Gemini)
 * Date: June 22, 2025
 * Batch ID: UserProfile-061725
 */
import React, { useState, useEffect, useMemo } from 'react';
import PropTypes from 'prop-types';
import { analyticsApi } from '../../services/analyticsApi';
import { useAuth } from '../../utils/UserAuth';
import { useTranslation } from '../../i18n';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

const PointsHistory = ({ userId }) => {
  const [history, setHistory] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const { t } = useTranslation();

  useEffect(() => {
    const fetchPointsData = async () => {
      if (!userId) return;
      setIsLoading(true);
      try {
        const response = await analyticsApi.getPointsHistory(userId);
        setHistory(response.data || []);
      } catch (err) {
        setError(t('pointsHistory.error.fetch'));
        console.error('Failed to fetch points history:', err);
      } finally {
        setIsLoading(false);
      }
    };
    fetchPointsData();
  }, [userId, t]);

  const totalPoints = useMemo(
    () => history.reduce((acc, item) => acc + item.points, 0),
    [history]
  );

  const handleExport = () => {
    const headers = 'Date,Action,Points\n';
    const csvContent = history
      .map((row) => `${new Date(row.date).toLocaleDateString()},${row.action},${row.points}`)
      .join('\n');
    const blob = new Blob([headers + csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'points-history.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  if (isLoading) return <div>{t('loading')}...</div>;
  if (error) return <div className="error-message">{error}</div>;

  return (
    <div className="points-history-container" role="region" aria-label={t('pointsHistory.title')}>
      <h3>{t('pointsHistory.title')}</h3>
      <p>
        {t('pointsHistory.totalPoints')}: <strong>{totalPoints.toLocaleString()}</strong>
      </p>
      <ResponsiveContainer width="100%" height={200}>
        <LineChart data={history} aria-label={t('pointsHistory.chart.ariaLabel')}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis
            dataKey="date"
            tickFormatter={(tick) => new Date(tick).toLocaleDateString()}
          />
          <YAxis />
          <Tooltip />
          <Legend />
          <Line type="monotone" dataKey="points" stroke="#8884d8" activeDot={{ r: 8 }} />
        </LineChart>
      </ResponsiveContainer>
      <table className="points-table" aria-label={t('pointsHistory.table.ariaLabel')}>
        <thead>
          <tr>
            <th>{t('pointsHistory.table.date')}</th>
            <th>{t('pointsHistory.table.action')}</th>
            <th>{t('pointsHistory.table.points')}</th>
          </tr>
        </thead>
        <tbody>
          {history.map((item) => (
            <tr key={item.id}>
              <td>{new Date(item.date).toLocaleDateString()}</td>
              <td>{item.action}</td>
              <td>{item.points.toLocaleString()}</td>
            </tr>
          ))}
        </tbody>
      </table>
      <button
        onClick={handleExport}
        className="export-button"
        aria-label={t('exportCSV')}
        onKeyDown={(e) => e.key === 'Enter' && handleExport()}
      >
        {t('exportCSV')}
      </button>
    </div>
  );
};

PointsHistory.propTypes = {
  userId: PropTypes.string.isRequired,
};

export default PointsHistory;