/*
 * File: UserProfilePage.jsx
 * Path: C:\CFH\frontend\src\components\user\UserProfilePage.jsx
 * Purpose: Main user profile page to manage details and view metrics.
 * Author: CFH Dev Team (Generated by Gemini)
 * Date: June 22, 2025
 * Batch ID: UserProfile-061725
 */
import React, { useState, useEffect, useCallback } from 'react';
import PropTypes from 'prop-types';
import PointsHistory from './PointsHistory';
import { analyticsApi } from '../../services/analyticsApi';
import { useAuth } from '../../utils/UserAuth';
import { useTranslation } from '../../i18n';

const UserProfilePage = () => {
  const { user } = useAuth();
  const { t } = useTranslation();
  const [profile, setProfile] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({});
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchProfileData = useCallback(async () => {
    if (!user?.id) return;
    setIsLoading(true);
    try {
      const response = await analyticsApi.getUserProfile(user.id);
      setProfile(response.data);
      setFormData(response.data);
    } catch (err) {
      setError(t('userProfile.error.fetch'));
      console.error('Failed to fetch profile:', err);
    } finally {
      setIsLoading(false);
    }
  }, [user?.id, t]);

  useEffect(() => {
    fetchProfileData();
  }, [fetchProfileData]);

  const handleInputChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const validateForm = () => {
    if (!formData.username || formData.username.length < 3) {
      setError(t('userProfile.error.invalidUsername'));
      return false;
    }
    if (!formData.email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      setError(t('userProfile.error.invalidEmail'));
      return false;
    }
    return true;
  };

  const handleSave = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;
    try {
      await analyticsApi.updateUserProfile(user.id, formData);
      setProfile(formData);
      setIsEditing(false);
    } catch (err) {
      setError(t('userProfile.error.update'));
    }
  };

  const handleCancel = () => {
    setFormData(profile);
    setIsEditing(false);
  };

  if (isLoading) return <div>{t('loading')}...</div>;
  if (error) return <div className="error-message">{error}</div>;

  return (
    <div className="user-profile-page" role="main" aria-label={t('userProfile.title')}>
      <div className="profile-card">
        <h2>{t('userProfile.title')}</h2>
        <p>
          <strong>{t('userProfile.username')}:</strong> {profile?.username}
        </p>
        <p>
          <strong>{t('userProfile.email')}:</strong> {profile?.email}
        </p>
        <p>
          <strong>{t('userProfile.subscriptionStatus')}:</strong>{' '}
          {profile?.subscription.status}
        </p>
      </div>
      <div className="edit-profile-section">
        <button
          onClick={() => setIsEditing(!isEditing)}
          aria-label={isEditing ? t('cancel') : t('editProfile')}
        >
          {isEditing ? t('cancel') : t('editProfile')}
        </button>
        {isEditing && (
          <form onSubmit={handleSave} aria-label={t('userProfile.editForm')}>
            <label>
              {t('userProfile.username')}:
              <input
                type="text"
                name="username"
                value={formData.username}
                onChange={handleInputChange}
                aria-required="true"
              />
            </label>
            <label>
              {t('userProfile.email')}:
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                aria-required="true"
              />
            </label>
            <button type="submit" aria-label={t('save')}>
              {t('save')}
            </button>
          </form>
        )}
      </div>
      <div className="subscription-metrics">
        <h3>{t('userProfile.subscriptionHistory')}</h3>
        <table aria-label={t('userProfile.table.ariaLabel')}>
          <thead>
            <tr>
              <th>{t('userProfile.table.date')}</th>
              <th>{t('userProfile.table.plan')}</th>
              <th>{t('userProfile.table.amount')}</th>
            </tr>
          </thead>
          <tbody>
            {profile?.paymentHistory.map((item) => (
              <tr key={item.id}>
                <td>{new Date(item.date).toLocaleDateString()}</td>
                <td>{item.plan}</td>
                <td>${item.amount.toFixed(2)}</td>
              </tr>
            ))}
          </tbody>
        </table>
        <p>
          <strong>{t('userProfile.totalContribution')}:</strong> $
          {profile?.revenueContribution.toFixed(2)}
        </p>
      </div>
      {user?.id && <PointsHistory userId={user.id} />}
    </div>
  );
};

UserProfilePage.propTypes = {
  user: PropTypes.shape({
    id: PropTypes.string,
  }),
};

export default UserProfilePage;